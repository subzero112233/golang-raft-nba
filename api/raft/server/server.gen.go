// Package raft provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package raft

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for EventStat.
const (
	EventStatAssist EventStat = "assist"

	EventStatBlock EventStat = "block"

	EventStatFlagrantFoul EventStat = "flagrant_foul"

	EventStatFreeThrow EventStat = "free_throw"

	EventStatPersonalFoul EventStat = "personal_foul"

	EventStatRebound EventStat = "rebound"

	EventStatTechnicalFoul EventStat = "technical_foul"

	EventStatThreePointer EventStat = "three_pointer"

	EventStatTurnover EventStat = "turnover"

	EventStatTwoPointer EventStat = "two_pointer"
)

// ErrorOutput defines model for ErrorOutput.
type ErrorOutput struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Event defines model for Event.
type Event struct {
	GameTime   string    `json:"game_time"`
	PlayerId   string    `json:"player_id"`
	PlayerName string    `json:"player_name"`
	Stat       EventStat `json:"stat"`
}

// EventStat defines model for Event.Stat.
type EventStat string

// Node defines model for Node.
type Node struct {
	Address string `json:"address"`
	Id      string `json:"id"`
}

// AddStatJSONBody defines parameters for AddStat.
type AddStatJSONBody Event

// AddNodeJSONBody defines parameters for AddNode.
type AddNodeJSONBody Node

// RemoveNodeJSONBody defines parameters for RemoveNode.
type RemoveNodeJSONBody Node

// AddStatJSONRequestBody defines body for AddStat for application/json ContentType.
type AddStatJSONRequestBody AddStatJSONBody

// AddNodeJSONRequestBody defines body for AddNode for application/json ContentType.
type AddNodeJSONRequestBody AddNodeJSONBody

// RemoveNodeJSONRequestBody defines body for RemoveNode for application/json ContentType.
type RemoveNodeJSONRequestBody RemoveNodeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// add a raft node
	// (POST /nba/stats)
	AddStat(c *gin.Context)
	// add a raft node
	// (POST /raft/join)
	AddNode(c *gin.Context)
	// get all nodes
	// (GET /raft/nodes)
	GetNodes(c *gin.Context)
	// remove a raft node
	// (POST /raft/remove)
	RemoveNode(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// AddStat operation middleware
func (siw *ServerInterfaceWrapper) AddStat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddStat(c)
}

// AddNode operation middleware
func (siw *ServerInterfaceWrapper) AddNode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddNode(c)
}

// GetNodes operation middleware
func (siw *ServerInterfaceWrapper) GetNodes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNodes(c)
}

// RemoveNode operation middleware
func (siw *ServerInterfaceWrapper) RemoveNode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveNode(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/nba/stats", wrapper.AddStat)

	router.POST(options.BaseURL+"/raft/join", wrapper.AddNode)

	router.GET(options.BaseURL+"/raft/nodes", wrapper.GetNodes)

	router.POST(options.BaseURL+"/raft/remove", wrapper.RemoveNode)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RUzW4TMRB+ldXAMcqm5bYnQKoQl1Zqj4Aix55NXHZtM2Oniqq8Oxo7203KpuIAQqin",
	"7PizPd9Pxo+gfR+8QxcZmkdgvcFe5c8rIk83KYYUpQzkA1K0mMEemdUa5TPuAkIDHMm6NexnwFHFxEvt",
	"zTFuXcQ1Euz3MyD8kSyhgebL002n577NhnN+dY86yr1XW3QTVNaqx2W0/TSZ0Kkd0tKal1Cn+vNSBECX",
	"eiHbEuIybsg/wAzig18GL7pIqo1gY912ak3KxWXrUyc46o2zWnXDQkBi78Z61Xn9HWagmC1HEJdWPjkj",
	"ZxM5v0U6smXg+MzNUe6puNmRTQdZUxZfHzI7dVgZQ8g86dCksc9IZTbDJb+2le3WtV4u0t5FpYvnvbId",
	"NEDIG2x5o2hr4+XF+7Wsz7XvYQYlOLjNW6q7skdoGWRNNkTrHTRwF1Db1molddV6qki1sVIhdIfF+Vcn",
	"PtvYyX1KyxpTci5nuUXictNivphfSAMf0KlgoYF388V8IXaruMke1W6larE4V8FzliOG5lafDTTwwZg7",
	"CaEYhRw/erMbDDj8zY/o1fcs7Yf5lK+3hC008KYeB7g+TG9dJiUbe2qEMqZSFY+dS0SREubMOHjHJfTL",
	"xUJ+Ts/fDCIqTlojc5s6sS43alXq4p/TcPT8TCgZmbTKdmgyC5nY1PeKdk9ac9BO/taC1lLW9966F6PJ",
	"Y/B3orkuVM4k48bGrymZ5+AJVDKTqjz3OJHZJ4zXecO0Vb8te+Jl+n9tXmOsVNdVxbqXoWIyYe+3eH40",
	"bjP+D6ajEHs1A/Ik98yMHPDjt23/MwAA//+VQkgxygkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

